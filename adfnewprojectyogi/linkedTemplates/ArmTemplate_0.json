{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfnewprojectyogi"
		},
		"LS_adls_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_adls'"
		},
		"LS_azure_sql_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_azure_sql'"
		},
		"LS_adb_compute_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "1016-085002-2rs3d4ee"
		},
		"LS_adls_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sanewprojectyogi.dfs.core.windows.net/"
		},
		"LS_azure_sql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "servnewprojectyogi.database.windows.net"
		},
		"LS_azure_sql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "dbnewprojectyogi"
		},
		"LS_azure_sql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminyogi"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_adb_compute')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-272851177975840.0.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/b572548a-6c21-4f40-8682-b87e1ad5cdab/resourceGroups/rg_new_project/providers/Microsoft.Databricks/workspaces/adbnewprojectyogi",
					"existingClusterId": "[parameters('LS_adb_compute_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_adb_deltalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-272851177975840.0.azuredatabricks.net",
					"clusterId": "1016-085002-2rs3d4ee",
					"workspaceResourceId": "/subscriptions/b572548a-6c21-4f40-8682-b87e1ad5cdab/resourceGroups/rg_new_project/providers/Microsoft.Databricks/workspaces/adbnewprojectyogi"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_adls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_adls_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_adls_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LS_azure_sql_properties_typeProperties_server')]",
					"database": "[parameters('LS_azure_sql_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_azure_sql_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_azure_sql_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_adls_json_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_adls_parquet_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"folder": {
						"type": "string"
					},
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_azure_sql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_deltalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adb_deltalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adb_deltalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inc_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lookupdata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "Select * from dev_spotify.metadata_tables.metadata",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "DS_deltalake",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lookupdata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lookupdata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Checking Status",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().load_type,'full')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Copy Incremental Tables",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Getting Watermark",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Getting Max Time From Database",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat(\n    'SELECT * FROM ',\n    item().schema_name, '.', item().table_name,\n    ' WHERE ',\n    item().timestamp_column,\n    ' BETWEEN ''',\n    activity('Getting Watermark').output.value[0].watermark,\n    ''' AND ''',\n    activity('Getting Max Time From Database').output.value[0].max_timestamp,\n    ''''\n)\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_azure_sql",
														"type": "DatasetReference",
														"parameters": {
															"schema": {
																"value": "@item().schema_name",
																"type": "Expression"
															},
															"table": {
																"value": "@item().table_name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_adls_parquet_dynamic",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@item().container_name",
																"type": "Expression"
															},
															"folder": {
																"value": "@item().directory_name",
																"type": "Expression"
															},
															"file_name": {
																"value": "@concat(item().file_name, utcNow())\n",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "Getting Max Time From Database",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "@concat(\n    'SELECT MAX(',\n    item().timestamp_column,\n    ') AS max_timestamp FROM ',\n    item().schema_name,\n    '.',\n    item().table_name\n)\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "DS_azure_sql",
														"type": "DatasetReference",
														"parameters": {
															"schema": {
																"value": "@item().schema_name",
																"type": "Expression"
															},
															"table": {
																"value": "@item().table_name",
																"type": "Expression"
															}
														}
													},
													"firstRowOnly": false
												}
											},
											{
												"name": "Getting Watermark",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureDatabricksDeltaLakeSource",
														"query": {
															"value": "@concat('SELECT watermark_timestamp as watermark FROM dev_spotify.metadata_tables.metadata WHERE table_name = ''', item().table_name, '''')\n",
															"type": "Expression"
														}
													},
													"dataset": {
														"referenceName": "DS_deltalake",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											},
											{
												"name": "update watermark",
												"type": "Lookup",
												"dependsOn": [
													{
														"activity": "Copy Incremental Tables",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureDatabricksDeltaLakeSource",
														"query": {
															"value": "@concat(\r\n    'UPDATE dev_spotify.metadata_tables.metadata ',\r\n    'SET watermark_timestamp = ''',\r\n    activity('Getting Max Time From Database').output.value[0].max_timestamp,\r\n    ''' WHERE table_name = ''',\r\n    item().table_name,\r\n    ''''\r\n)\r\n",
															"type": "Expression"
														}
													},
													"dataset": {
														"referenceName": "DS_deltalake",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy full load tables",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_azure_sql",
														"type": "DatasetReference",
														"parameters": {
															"schema": {
																"value": "@item().schema_name",
																"type": "Expression"
															},
															"table": {
																"value": "@item().table_name",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_adls_parquet_dynamic",
														"type": "DatasetReference",
														"parameters": {
															"container": {
																"value": "@item().container_name",
																"type": "Expression"
															},
															"folder": {
																"value": "@item().directory_name",
																"type": "Expression"
															},
															"file_name": {
																"value": "@item().file_name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Alerts",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "For Each Table",
								"dependencyConditions": [
									"Failed",
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod-05.centralindia.logic.azure.com:443/workflows/9fee01696c1d4f02bb2f5735d7278067/triggers/When_an_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_an_HTTP_request_is_received%2Frun&sv=1.0&sig=E0NeHv9IFSh1-RXAoWF4Tv3SiOlx4kPJFte3slWRs9U",
							"body": {
								"value": "@concat('{\"pipeline_name\":\"', pipeline().Pipeline, '\",\"pipeline_runID\":\"', pipeline().RunId, '\"}')\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"current": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_deltalake')]",
				"[concat(variables('factoryId'), '/datasets/DS_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/DS_adls_parquet_dynamic')]"
			]
		}
	]
}